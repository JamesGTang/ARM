
C:/Users/James Tang/Desktop/ARM/Lab1/center.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start

_start:
			// R4 holds result
			LDR R4, =AVG
   0:	e59f4084 	ldr	r4, [pc, #132]	; 8c <NUMBERS+0x20>
			// init R0 to 0
			LDR R0,[R4]	//R0=0
   4:	e5940000 	ldr	r0, [r4]
			// R2 holds counter for loop to find max
			LDR R2, [R4, #4] // R2=8
   8:	e5942004 	ldr	r2, [r4, #4]
			// R3 stores the numbers
			ADD R3, R4, #8  // R3=3C
   c:	e2843008 	add	r3, r4, #8

00000010 <SUM>:

SUM:		LDR R1, [R3]  //R1=4
  10:	e5931000 	ldr	r1, [r3]
			ADD R0,R0,R1 // R0=4
  14:	e0800001 	add	r0, r0, r1
			// Counter decrement
			SUBS R2, R2, #1 //R2=6
  18:	e2522001 	subs	r2, r2, #1
			// if counter is zero
			BEQ DONESUM
  1c:	0a000001 	beq	28 <DONESUM>
			// else go to next number
			ADD R3, R3, #4 //R3=address+4			
  20:	e2833004 	add	r3, r3, #4
			 // R0=9
			B SUM
  24:	eafffff9 	b	10 <SUM>

00000028 <DONESUM>:
			
			// load number of entries to  R2 again
DONESUM:	LDR R2, [R4, #4] // R2=8
  28:	e5942004 	ldr	r2, [r4, #4]

0000002c <AVERAGE>:

			// divide sum recursively to find average
AVERAGE:	// divide by 2 everytime until reaches one
			ASRS R2,R2,#1 //R2=4
  2c:	e1b020c2 	asrs	r2, r2, #1
			BEQ INIT
  30:	0a000001 	beq	3c <INIT>
			// divide the sum by shifing right 
			ASR R0,R0,#1 //R0=14
  34:	e1a000c0 	asr	r0, r0, #1
			B AVERAGE
  38:	eafffffb 	b	2c <AVERAGE>

0000003c <INIT>:

INIT:		// reload counter into R2
			LDR R2, [R4, #4] // R2=8			
  3c:	e5942004 	ldr	r2, [r4, #4]
			ADD R3, R4, #8  // R3=3C
  40:	e2843008 	add	r3, r4, #8

00000044 <BALANCE>:

BALANCE:  	// R0 is average R0=5
			// loop through array again
			LDR R1, [R3]  //R1=4
  44:	e5931000 	ldr	r1, [r3]
			SUB R1,R1,R0 // R1=-1 R1=FFFFFFFF in two's complement
  48:	e0411000 	sub	r1, r1, r0
			STR R1, [R3]
  4c:	e5831000 	str	r1, [r3]
			// Counter decrement
			SUBS R2, R2, #1 //R2=6
  50:	e2522001 	subs	r2, r2, #1
			// if counter is zero
			BEQ END
  54:	0a000001 	beq	60 <END>
			// else go to next number
			ADD R3, R3, #4 //R3=address+4			
  58:	e2833004 	add	r3, r3, #4
			 // R0=9
			B BALANCE
  5c:	eafffff8 	b	44 <BALANCE>

00000060 <END>:

END:		B END 
  60:	eafffffe 	b	60 <END>

00000064 <AVG>:
  64:	00000000 	.word	0x00000000

00000068 <N>:
  68:	00000008 	.word	0x00000008

0000006c <NUMBERS>:
  6c:	00000004 	.word	0x00000004
  70:	00000005 	.word	0x00000005
  74:	00000003 	.word	0x00000003
  78:	00000008 	.word	0x00000008
  7c:	00000001 	.word	0x00000001
  80:	0000000d 	.word	0x0000000d
  84:	00000002 	.word	0x00000002
  88:	00000004 	.word	0x00000004
  8c:	00000064 	.word	0x00000064
