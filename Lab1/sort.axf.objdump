
C:/Users/James Tang/Desktop/ARM/Lab1/sort.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start

_start:
			LDR R0, =N			//R0 points to the result location
   0:	e59f0078 	ldr	r0, [pc, #120]	; 80 <NUMBERS+0x10>
			//ADD R0, R0 ,#4
			LDR R9, [R0]
   4:	e5909000 	ldr	r9, [r0]
			MOV R1, #0			//R1 holds "sorted" variable; init to false
   8:	e3a01000 	mov	r1, #0
			MOV R6, #1			//Holds #1
   c:	e3a06001 	mov	r6, #1

00000010 <COND>:

COND:	
			// if array is sorted
			CMP R1, R6			// does not go into loop
  10:	e1510006 	cmp	r1, r6
			// got to end after sort
			BGE END				// ends at last loop
  14:	aa000013 	bge	68 <END>
			MOV R1, #1			//R1=1
  18:	e3a01001 	mov	r1, #1
			// postion counter from 1
			MOV R4, #1			//R4=1
  1c:	e3a04001 	mov	r4, #1
			// reset R2 to starting postion
			ADD R2, R0, #0		//R2=70
  20:	e2802000 	add	r2, r0, #0
			// reset R3 to second postion
			ADD R3, R0, #4		//R3=74
  24:	e2803004 	add	r3, r0, #4

00000028 <SORT>:

SORT:		// if position counter reaches end of array
			CMP R4, R9			// should go into loop at the last execution
  28:	e1540009 	cmp	r4, r9
			// return to condition loop
			BGE COND
  2c:	aafffff7 	bge	10 <COND>
			// increment position counter
			ADD R4, R4, #1		//R4=2
  30:	e2844001 	add	r4, r4, #1
			ADD R2, #4			//R2=74
  34:	e2822004 	add	r2, r2, #4
			ADD R3, #4			//R3=78
  38:	e2833004 	add	r3, r3, #4
			LDR R7, [R2]		//R7=4
  3c:	e5927000 	ldr	r7, [r2]
			LDR R8, [R3]		//R8=3			
  40:	e5938000 	ldr	r8, [r3]
			CMP R7, R8			//compare R7,R8, if R7>R8 then swap
  44:	e1570008 	cmp	r7, r8
			BLE	SORT	 		//begin the loop again
  48:	dafffff6 	ble	28 <SORT>
			// swap R5=R7
			// R7=R8
			// R8=R5
			MOV R5, R7			
  4c:	e1a05007 	mov	r5, r7
			MOV R7, R8			
  50:	e1a07008 	mov	r7, r8
			MOV R8, R5			//R7=3,R8=4
  54:	e1a08005 	mov	r8, r5
			// put back in memories
			STR R7, [R2]		
  58:	e5827000 	str	r7, [r2]
			STR R8, [R3]
  5c:	e5838000 	str	r8, [r3]
			// put sorted to false	
			MOV R1, #0
  60:	e3a01000 	mov	r1, #0
			// resurse again		
			B SORT				//Return to for loop			
  64:	eaffffef 	b	28 <SORT>

00000068 <END>:

END:		B END 				//end program
  68:	eafffffe 	b	68 <END>

0000006c <N>:
  6c:	00000006 	.word	0x00000006

00000070 <NUMBERS>:
  70:	00000004 	.word	0x00000004
  74:	00000003 	.word	0x00000003
  78:	00000002 	.word	0x00000002
  7c:	00000006 	.word	0x00000006
  80:	0000006c 	.word	0x0000006c
